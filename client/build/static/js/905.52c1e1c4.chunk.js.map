{"version":3,"file":"static/js/905.52c1e1c4.chunk.js","mappings":"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","sources":["pages/form/components/commands/ChangeOrganization.jsx","pages/report/components/chart/QuestionAnswerChart.jsx","pages/form/components/tab/response/view/SectionsResponses.jsx","pages/form/components/tab/response/view/OrganizationView.jsx","pages/form/components/tab/response/ResponseTab.jsx"],"sourcesContent":["import Done from '@mui/icons-material/Done';\r\nimport Settings from '@mui/icons-material/Settings';\r\nimport Button from '@mui/material/Button';\r\nimport SpeedDial from '@mui/material/SpeedDial';\r\nimport SpeedDialAction from '@mui/material/SpeedDialAction';\r\nimport SpeedDialIcon from '@mui/material/SpeedDialIcon';\r\nimport PropTypes from 'prop-types';\r\nimport React from 'react';\r\nimport { topScroll } from '../../../../common/components/layout/ScrollToTop';\r\n\r\nconst ChangeOrganization = ({\r\n  organizations,\r\n  organization,\r\n  setOrganization,\r\n}) => (\r\n  <SpeedDial\r\n    ariaLabel=\"SpeedDial basic example\"\r\n    sx={{ position: 'fixed', bottom: 25, right: 25 }}\r\n    icon={<SpeedDialIcon icon={<Settings />} />}\r\n  >\r\n    {organizations?.map((company) => {\r\n      const name = Object.keys(company)[0];\r\n      const current = Object.keys(organization)[0];\r\n      return (\r\n        <SpeedDialAction\r\n          key={name}\r\n          FabProps={{\r\n            variant: 'extended',\r\n          }}\r\n          icon={\r\n            <Button\r\n              startIcon={current === name ? <Done /> : null}\r\n              variant=\"text\"\r\n              component=\"div\"\r\n            >\r\n              {name}\r\n            </Button>\r\n          }\r\n          tooltipTitle={name}\r\n          onClick={() => {\r\n            setOrganization(company);\r\n            topScroll();\r\n          }}\r\n        />\r\n      );\r\n    })}\r\n  </SpeedDial>\r\n);\r\n\r\nChangeOrganization.propTypes = {\r\n  organizations: PropTypes.array.isRequired,\r\n  setOrganization: PropTypes.func.isRequired,\r\n  organization: PropTypes.object.isRequired,\r\n};\r\nexport default ChangeOrganization;\r\n","import React from 'react';\r\nimport Chart from 'react-apexcharts';\r\nimport PropTypes from 'prop-types';\r\nimport { useTheme } from '@mui/material';\r\nimport Typography from '@mui/material/Typography';\r\nimport { useSelector } from 'react-redux';\r\nimport Colors from '../../../../helper/Colors';\r\nimport useChartSeries from '../../../../hooks/useChartSeries';\r\nimport ChartUtils from '../../utils/ChartUtils';\r\n\r\nconst QuestionAnswerChart = ({ activeQuestion, activeSection, ...props }) => {\r\n  const theme = useTheme();\r\n  const options = {\r\n    series: [],\r\n    options: {\r\n      chart: {\r\n        id: `${activeQuestion._id}`,\r\n        toolbar: {\r\n          show: true,\r\n          offsetX: 0,\r\n          offsetY: 0,\r\n          tools: {\r\n            download: true,\r\n          },\r\n        },\r\n      },\r\n      fill: {\r\n        type: 'gradient',\r\n      },\r\n      yaxis: {\r\n        labels: {\r\n          show: true,\r\n        },\r\n      },\r\n      xaxis: {\r\n        labels: {\r\n          show: false,\r\n        },\r\n      },\r\n      plotOptions: {\r\n        bar: {\r\n          horizontal: true,\r\n          columnWidth: '70%',\r\n          borderRadius: 4,\r\n          dataLabels: {\r\n            position: 'bottom',\r\n            maxItems: 100,\r\n            hideOverflowingLabels: true,\r\n          },\r\n        },\r\n      },\r\n      colors: [Colors.GRAPH_COLOR_1],\r\n      legend: {\r\n        show: false,\r\n      },\r\n    },\r\n  };\r\n  const data = useSelector((state) => state?.response?.value);\r\n\r\n  const state = useChartSeries(\r\n    data,\r\n    options,\r\n    ChartUtils.getQuestionAnswerSeries,\r\n    { activeQuestion, activeSection },\r\n    theme.palette.mode\r\n  );\r\n\r\n  return (\r\n    <div className=\"question-response-chart\">\r\n      <Typography\r\n        sx={{\r\n          typography: { xs: 'smallQuestion', sm: 'body2', md: 'question' },\r\n        }}\r\n      >\r\n        {activeQuestion.text}\r\n      </Typography>\r\n      <div className=\"apex-chart\" {...props}>\r\n        <Chart\r\n          options={state.options}\r\n          series={state.series}\r\n          type=\"bar\"\r\n          height=\"300\"\r\n        />\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nQuestionAnswerChart.propTypes = {\r\n  activeQuestion: PropTypes.object.isRequired,\r\n  activeSection: PropTypes.object.isRequired,\r\n};\r\nexport default QuestionAnswerChart;\r\n","import Grid from '@mui/material/Grid';\r\nimport Paper from '@mui/material/Paper';\r\nimport Skeleton from '@mui/material/Skeleton';\r\nimport Typography from '@mui/material/Typography';\r\nimport PropTypes from 'prop-types';\r\nimport React from 'react';\r\nimport useMobileStepper from '../../../../../../hooks/useMobileStepper';\r\nimport QuestionAnswerChart from '../../../../../report/components/chart/QuestionAnswerChart';\r\n\r\nconst SectionsResponses = ({ data }) => {\r\n  const { activeStep, BasicStepper } = useMobileStepper(\r\n    data?.formData?.sections,\r\n    'text'\r\n  );\r\n\r\n  return (\r\n    <Grid\r\n      component={Paper}\r\n      item\r\n      sx={{\r\n        width: '100%',\r\n        p: 1,\r\n      }}\r\n    >\r\n      {data?.formData?.sections ? (\r\n        <>\r\n          <Typography\r\n            sx={{\r\n              mb: 5,\r\n              typography: { xs: 'body2', sm: 'body2', md: 'question' },\r\n              color: 'primary.main',\r\n            }}\r\n          >\r\n            Responses for the Section -\r\n            <strong>{data.formData.sections[activeStep]?.name}</strong>\r\n          </Typography>\r\n          {data.formData.sections[activeStep]?.questions.map((ques) => (\r\n            <QuestionAnswerChart\r\n              key={ques._id}\r\n              activeQuestion={ques}\r\n              activeSection={data.formData.sections[activeStep]}\r\n            />\r\n          ))}\r\n          {BasicStepper}\r\n        </>\r\n      ) : (\r\n        <>\r\n          <Skeleton variant=\"rectangular\" height={150} />\r\n          <Skeleton variant=\"rectangular\" height={150} />\r\n        </>\r\n      )}\r\n    </Grid>\r\n  );\r\n};\r\n\r\nSectionsResponses.propTypes = {\r\n  data: PropTypes.object.isRequired,\r\n};\r\nexport default SectionsResponses;\r\n","import Avatar from '@mui/material/Avatar';\r\nimport Grid from '@mui/material/Grid';\r\nimport List from '@mui/material/List';\r\nimport ListItem from '@mui/material/ListItem';\r\nimport ListItemAvatar from '@mui/material/ListItemAvatar';\r\nimport Paper from '@mui/material/Paper';\r\nimport Typography from '@mui/material/Typography';\r\nimport PropTypes from 'prop-types';\r\nimport React from 'react';\r\nimport { useSelector } from 'react-redux';\r\nimport { useParams } from 'react-router-dom';\r\nimport useCreatePDF from '../../../../../../hooks/useCreatePDF';\r\nimport ReportService from '../../../../../report/services/ReportService';\r\nimport DownloadReport from '../../../button/DownloadReport';\r\nimport PreviewReport from '../../../button/PreviewReport';\r\nimport SectionsResponses from './SectionsResponses';\r\n\r\nconst OrganizationView = ({ organization }) => {\r\n  const { formId } = useParams();\r\n  const company = Object.keys(organization)[0];\r\n  const userId = Object.values(organization)[0][0]._id;\r\n  const url = ReportService.getUrlByUser(formId, userId);\r\n  const { savePDF, Report } = useCreatePDF(false, userId);\r\n  const data = useSelector((state) => state?.response?.value);\r\n\r\n  return (\r\n    <Grid\r\n      container\r\n      sx={{\r\n        mt: 2,\r\n        gap: 3,\r\n        width: 'min(100%, 85vw)',\r\n      }}\r\n    >\r\n      <Grid\r\n        component={Paper}\r\n        item\r\n        sx={{\r\n          width: '100%',\r\n          p: 1,\r\n          textAlign: 'center',\r\n        }}\r\n      >\r\n        <List sx={{ wordBreak: 'break-word' }}>\r\n          <ListItem alignItems=\"flex-start\">\r\n            <ListItemAvatar>\r\n              <Avatar alt=\"Users\" sx={{ bgcolor: 'primary.main' }} />\r\n            </ListItemAvatar>\r\n            <Grid container direction=\"column\" spacing=\"2\" component=\"p\">\r\n              <Typography\r\n                component=\"span\"\r\n                sx={{\r\n                  typography: {\r\n                    xs: 'smallQuestion',\r\n                    sm: 'smallQuestion',\r\n                    md: 'question',\r\n                  },\r\n                  color: 'primary.main',\r\n                }}\r\n              >\r\n                Who has Responded ?\r\n              </Typography>\r\n              {Object.values(organization)[0].map(({ email }) => (\r\n                <Typography component=\"span\" key={email} variant=\"body2\">\r\n                  <strong>•</strong> {email}\r\n                </Typography>\r\n              ))}\r\n            </Grid>\r\n          </ListItem>\r\n        </List>\r\n      </Grid>\r\n      <SectionsResponses data={data} />\r\n      <Grid\r\n        item\r\n        sx={{\r\n          width: '100%',\r\n          p: 1,\r\n          textAlign: 'center',\r\n        }}\r\n      >\r\n        <Grid container direction=\"column\" spacing=\"5\" justifyContent=\"center\">\r\n          <Typography variant=\"question\">\r\n            <strong>{`PLM Maturity Report for ${company}`}</strong>\r\n          </Typography>\r\n          <PreviewReport url={url} variant=\"text\" />\r\n          <DownloadReport savePDF={savePDF} variant=\"text\" />\r\n          {Report}\r\n        </Grid>\r\n      </Grid>\r\n    </Grid>\r\n  );\r\n};\r\n\r\nOrganizationView.propTypes = {\r\n  organization: PropTypes.object.isRequired,\r\n};\r\nexport default OrganizationView;\r\n","import CircularProgress from '@mui/material/CircularProgress';\r\nimport React, { useEffect, useState } from 'react';\r\nimport { CenteredGridBox, useOrganizations, BasicUserForm } from '../index';\r\nimport ChangeOrganization from '../../commands/ChangeOrganization';\r\nimport OrganizationView from './view/OrganizationView';\r\n\r\nconst ResponseTab = () => {\r\n  const { loading, organizations } = useOrganizations();\r\n  const [organization, setOrganization] = useState(null);\r\n\r\n  useEffect(() => {\r\n    if (!loading) setOrganization(organizations[0]);\r\n    return () => {\r\n      setOrganization(null);\r\n    };\r\n  }, [loading]);\r\n\r\n  return (\r\n    <BasicUserForm>\r\n      <CenteredGridBox>\r\n        {!loading && organizations && organization ? (\r\n          <>\r\n            <OrganizationView organization={organization} />\r\n            <ChangeOrganization\r\n              organization={organization}\r\n              organizations={organizations}\r\n              setOrganization={setOrganization}\r\n            />\r\n          </>\r\n        ) : (\r\n          <CircularProgress />\r\n        )}\r\n      </CenteredGridBox>\r\n    </BasicUserForm>\r\n  );\r\n};\r\n\r\nexport default ResponseTab;\r\n"],"names":["organizations","organization","setOrganization","SpeedDial","ariaLabel","sx","position","bottom","right","icon","SpeedDialIcon","Settings","map","company","name","Object","keys","current","SpeedDialAction","FabProps","variant","Button","startIcon","Done","component","tooltipTitle","onClick","topScroll","activeQuestion","activeSection","props","theme","useTheme","options","series","chart","id","_id","toolbar","show","offsetX","offsetY","tools","download","fill","type","yaxis","labels","xaxis","plotOptions","bar","horizontal","columnWidth","borderRadius","dataLabels","maxItems","hideOverflowingLabels","colors","Colors","legend","data","useSelector","state","response","value","useChartSeries","ChartUtils","palette","mode","className","Typography","typography","xs","sm","md","text","height","useMobileStepper","formData","sections","activeStep","BasicStepper","Grid","Paper","item","width","p","mb","color","questions","ques","Skeleton","formId","useParams","userId","values","url","ReportService","useCreatePDF","savePDF","Report","container","mt","gap","textAlign","List","wordBreak","ListItem","alignItems","ListItemAvatar","Avatar","alt","bgcolor","direction","spacing","email","justifyContent","PreviewReport","DownloadReport","useOrganizations","loading","useState","useEffect","CircularProgress"],"sourceRoot":""}